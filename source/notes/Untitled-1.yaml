
qml: Selected file (file):  file:///C:/Escope/Miniscope-DAQ-QT-V5V6-attempt/deviceConfigs/UserConfigExample-primary.json
constructJsonTreeModel:  Key: "animalName" , Value: "Fully Ball" , Type: "String"
handleJsonObject:  Key: "enabled" , Value: "false" , Type: "Bool"
handleJsonObject:  Key: "modelPath" , Value: "ABSOLUTE/PATH/TO/DLC/MODEL" , Type: "FilePath"
handleJsonObject:  Key: "enabled" , Value: "true" , Type: "Bool"
handleJsonObject:  Key: "numBinsX" , Value: "100" , Type: "Integer"
handleJsonObject:  Key: "numBinsY" , Value: "100" , Type: "Integer"
handleJsonObject:  Key: "poseIdxToUse" , Value: "" , Type: [initial] "Array(Integer)"
-> TYPE "Integer"
-> handleJsonArray:  0 , Value: "0" , Type: "Integer"
-> handleJsonArray:  1 , Value: "1" , Type: "Integer"
-> handleJsonArray:  2 , Value: "2" , Type: "Integer"
-> handleJsonArray:  3 , Value: "3" , Type: "Integer"
-> handleJsonArray:  4 , Value: "4" , Type: "Integer"
parent:  0x2093b21bdf0
child( 0 ,  0 ):  0x2093b21baf0
child( 1 ,  0 ):  0x2093b21bd90
child( 2 ,  0 ):  0x2093b21b950
child( 3 ,  0 ):  0x2093b21bab0
child( 4 ,  0 ):  0x2093b21beb0
handleJsonObject:  Key: "occupancyPlot" , Value: "4" , Type: [initial] "Object"  [final] "Integer"
handleJsonObject:  Key: "pCutoffDisplay" , Value: "0.3" , Type: "Double"
handleJsonObject:  Key: "poseIdxForTraceDisplay" , Value: "" , Type: [initial] "Array(String)"
-> TYPE "String"
-> handleJsonArray:  0 , Value: "0wh" , Type: "String"
-> handleJsonArray:  1 , Value: "1w" , Type: "String"
-> handleJsonArray:  2 , Value: "2w" , Type: "String"
parent:  0x2093b21c030
child( 0 ,  0 ):  0x2093b21bf50
child( 1 ,  0 ):  0x2093b21bc50
child( 2 ,  0 ):  0x2093b21be50
handleJsonObject:  Key: "enabled" , Value: "true" , Type: "Bool"
handleJsonObject:  Key: "markerSize" , Value: "20" , Type: "Integer"
handleJsonObject:  Key: "numOfPastPoses" , Value: "6" , Type: "Integer"
handleJsonObject:  Key: "connectedIndices" , Value: "" , Type: [initial] "Array(Array(Integer))"
-> TYPE "Array(Integer)"
-> TYPE "Integer"
-> handleJsonArray:  0 , Value: "0" , Type: "Integer"
-> handleJsonArray:  1 , Value: "1" , Type: "Integer"
-> handleJsonArray:  2 , Value: "2" , Type: "Integer"
-> handleJsonArray:  3 , Value: "3" , Type: "Integer"
-> handleJsonArray:  4 , Value: "4" , Type: "Integer"
-> handleJsonArray:  5 , Value: "5" , Type: "Integer"
parent:  0x2093b21bf30
child( 0 ,  0 ):  0x2093b21bdd0
child( 1 ,  0 ):  0x2093b21bb30
child( 2 ,  0 ):  0x2093b21b8f0
child( 3 ,  0 ):  0x2093b21be10
child( 4 ,  0 ):  0x2093b21bf90
child( 5 ,  0 ):  0x2093b21ba10
-> handleJsonArray:  0 , Value: "5" , Type: [initial] "Array(Integer)"  [final] "Integer"
-> TYPE "Integer"
-> handleJsonArray:  0 , Value: "6" , Type: "Integer"
-> handleJsonArray:  1 , Value: "7" , Type: "Integer"
-> handleJsonArray:  2 , Value: "8" , Type: "Integer"
-> handleJsonArray:  3 , Value: "9" , Type: "Integer"
-> handleJsonArray:  4 , Value: "10" , Type: "Integer"
-> handleJsonArray:  5 , Value: "11" , Type: "Integer"
parent:  0x2093b21bf10
child( 0 ,  0 ):  0x2093b21bb50
child( 1 ,  0 ):  0x2093b21bcf0
child( 2 ,  0 ):  0x2093b21bb70
child( 3 ,  0 ):  0x2093b21bf70
child( 4 ,  0 ):  0x2093b21bbd0
child( 5 ,  0 ):  0x2093b21bfb0
-> handleJsonArray:  1 , Value: "11" , Type: [initial] "Array(Integer)"  [final] "Integer"
-> TYPE "Integer"
-> handleJsonArray:  0 , Value: "12" , Type: "Integer"
-> handleJsonArray:  1 , Value: "13" , Type: "Integer"
parent:  0x2093b21bff0
child( 0 ,  0 ):  0x2093b21bd10
child( 1 ,  0 ):  0x2093b21bbf0
-> handleJsonArray:  2 , Value: "13" , Type: [initial] "Array(Integer)"  [final] "Integer"
parent:  0x2093b21bc90
child( 0 ,  0 ):  0x2093b21bf30
child( 1 ,  0 ):  0x2093b21bf10
child( 2 ,  0 ):  0x2093b21bff0
handleJsonObject:  Key: "enabled" , Value: "true" , Type: "Bool"
handleJsonObject:  Key: "skeleton" , Value: "true" , Type: [initial] "Object"  [final] "Bool"
handleJsonObject:  Key: "type" , Value: "point" , Type: "String"
handleJsonObject:  Key: "poseOverlay" , Value: "point" , Type: [initial] "Object"  [final] "String"
handleJsonObject:  Key: "pyEnvPath" , Value: "ABSOLUTE/PATH/TO/PYTHON/ENVIRONMENT" , Type: "FilePath"
handleJsonObject:  Key: "resize" , Value: "1" , Type: "Double"
handleJsonObject:  Key: "type" , Value: "DeepLabCut-Live" , Type: "String"
handleJsonObject:  Key: "windowScale" , Value: "0.75" , Type: "Double"
handleJsonObject:  Key: "windowX" , Value: "200" , Type: "Integer"
handleJsonObject:  Key: "windowY" , Value: "100" , Type: "Integer"
constructJsonTreeModel:  Key: "behaviorTracker" , Value: "100" , Type: [initial] "Object"  [final] "Integer"
constructJsonTreeModel:  Key: "customEntry0" , Value: "customEntValHere" , Type: "String"
constructJsonTreeModel:  Key: "dataDirectory" , Value: "C:/FILL/OUT/THIS/PATH" , Type: "DirPath"
handleJsonObject:  Key: "height" , Value: "480" , Type: "Integer"
handleJsonObject:  Key: "leftEdge" , Value: "0" , Type: "Integer"
handleJsonObject:  Key: "note3" , Value: "Edge values are zero indexed" , Type: "Unknown"
handleJsonObject:  Key: "notes" , Value: "This defines the bounding box of the portion of the video that is saved to disk" , Type: "Unknown"
handleJsonObject:  Key: "topEdge" , Value: "0" , Type: "Integer"
handleJsonObject:  Key: "width" , Value: "640" , Type: "Integer"
handleJsonObject:  Key: "ROI" , Value: "640" , Type: [initial] "Object"  [final] "Integer"
handleJsonObject:  Key: "cameraCalibrationFileLocation" , Value: "N/A" , Type: "Unknown"
handleJsonObject:  Key: "compression" , Value: "MJPG" , Type: "String"
handleJsonObject:  Key: "deviceID" , Value: "0" , Type: "Integer"
handleJsonObject:  Key: "deviceType" , Value: "WebCam-640x480" , Type: "CameraDeviceType"
handleJsonObject:  Key: "framesPerFile" , Value: "1000" , Type: "Integer"
handleJsonObject:  Key: "showSaturation" , Value: "true" , Type: "Bool"
handleJsonObject:  Key: "windowScale" , Value: "0.5" , Type: "Double"
handleJsonObject:  Key: "windowX" , Value: "800" , Type: "Integer"
handleJsonObject:  Key: "windowY" , Value: "600" , Type: "Integer"
handleJsonObject:  Key: "cameraDeviceName" , Value: "600" , Type: [initial] "Object"  [final] "Integer"
handleJsonObject:  Key: "cameras" , Value: "600" , Type: [initial] "Object"  [final] "Integer"
handleJsonObject:  Key: "height" , Value: "600" , Type: "Integer"
handleJsonObject:  Key: "leftEdge" , Value: "0" , Type: "Integer"
handleJsonObject:  Key: "note3" , Value: "Edge values are zero indexed" , Type: "Unknown"
handleJsonObject:  Key: "notes" , Value: "This defines the bounding box of the portion of the video that is saved to disk" , Type: "Unknown"
handleJsonObject:  Key: "topEdge" , Value: "0" , Type: "Integer"
handleJsonObject:  Key: "width" , Value: "600" , Type: "Integer"
handleJsonObject:  Key: "ROI" , Value: "600" , Type: [initial] "Object"  [final] "Integer"
handleJsonObject:  Key: "compression" , Value: "FFV1" , Type: "String"
handleJsonObject:  Key: "deviceID" , Value: "1" , Type: "Integer"
handleJsonObject:  Key: "deviceType" , Value: "Miniscope_V4_BNO" , Type: "MiniscopeDeviceType"
handleJsonObject:  Key: "ewl" , Value: "50" , Type: "Integer"
handleJsonObject:  Key: "frameRate" , Value: "20FPS" , Type: "String"
handleJsonObject:  Key: "framesPerFile" , Value: "1000" , Type: "Integer"
handleJsonObject:  Key: "gain" , Value: "Low" , Type: "String"
handleJsonObject:  Key: "enabled" , Value: "true" , Type: "Bool"
handleJsonObject:  Key: "filterBadData" , Value: "true" , Type: "Bool"
handleJsonObject:  Key: "plotTrace" , Value: "" , Type: [initial] "Array(String)"
-> TYPE "String"
-> handleJsonArray:  0 , Value: "roll" , Type: "String"
-> handleJsonArray:  1 , Value: "pitch" , Type: "String"
-> handleJsonArray:  2 , Value: "yaw" , Type: "String"
parent:  0x2093b21c590
child( 0 ,  0 ):  0x2093b21c090
child( 1 ,  0 ):  0x2093b21c1f0
child( 2 ,  0 ):  0x2093b21c270
handleJsonObject:  Key: "headOrientation" , Value: "yaw" , Type: [initial] "Object"  [final] "String"
handleJsonObject:  Key: "led0" , Value: "10" , Type: "Integer"
handleJsonObject:  Key: "showSaturation" , Value: "true" , Type: "Bool"
handleJsonObject:  Key: "windowScale" , Value: "0.75" , Type: "Double"
handleJsonObject:  Key: "windowX" , Value: "800" , Type: "Integer"
handleJsonObject:  Key: "windowY" , Value: "100" , Type: "Integer"
handleJsonObject:  Key: "miniscopeDeviceName" , Value: "100" , Type: [initial] "Object"  [final] "Integer"
handleJsonObject:  Key: "miniscopes" , Value: "100" , Type: [initial] "Object"  [final] "Integer"
constructJsonTreeModel:  Key: "devices" , Value: "100" , Type: [initial] "Object"  [final] "Integer"
handleJsonObject:  Key: "directoryStructure" , Value: "" , Type: [initial] "Array(String)"
-> TYPE "String"
-> handleJsonArray:  0 , Value: "researcherName" , Type: "String"
-> handleJsonArray:  1 , Value: "experimentName" , Type: "String"
-> handleJsonArray:  2 , Value: "animalName" , Type: "String"
-> handleJsonArray:  3 , Value: "customEntry0" , Type: "String"
-> handleJsonArray:  4 , Value: "date" , Type: "String"
-> handleJsonArray:  5 , Value: "time" , Type: "String"
parent:  0x2093b21c670
child( 0 ,  0 ):  0x2093b21c170
child( 1 ,  0 ):  0x2093b21c570
child( 2 ,  0 ):  0x2093b21c470
child( 3 ,  0 ):  0x2093b21c130
child( 4 ,  0 ):  0x2093b21c150
child( 5 ,  0 ):  0x2093b21c2b0
handleJsonObject:  Key: "arguments" , Value: "" , Type: [initial] "Array(String)"
-> TYPE "String"
-> handleJsonArray:  0 , Value: "arg1" , Type: "String"
-> handleJsonArray:  1 , Value: "arg2" , Type: "String"
parent:  0x2093b21c630
child( 0 ,  0 ):  0x2093b21c350
child( 1 ,  0 ):  0x2093b21c210
handleJsonObject:  Key: "enabled" , Value: "true" , Type: "Bool"
handleJsonObject:  Key: "filePath" , Value: "C:/FILL/OUT/THIS/PATH" , Type: "FilePath"
constructJsonTreeModel:  Key: "executableOnStartRecording" , Value: "C:/FILL/OUT/THIS/PATH" , Type: [initial] "Object"  [final] "FilePath"
handleJsonObject:  Key: "arguments" , Value: "" , Type: [initial] "Array(String)"
-> TYPE "String"
-> handleJsonArray:  0 , Value: "arg1" , Type: "String"
-> handleJsonArray:  1 , Value: "arg2" , Type: "String"
-> handleJsonArray:  2 , Value: "arg3" , Type: "String"
parent:  0x2093b21cf50
child( 0 ,  0 ):  0x2093b21cb70
child( 1 ,  0 ):  0x2093b21cd90
child( 2 ,  0 ):  0x2093b21cd10
handleJsonObject:  Key: "enabled" , Value: "true" , Type: "Bool"
handleJsonObject:  Key: "filePath" , Value: "C:/FILL/OUT/THIS/PATH" , Type: "FilePath"
constructJsonTreeModel:  Key: "executableOnStopRecording" , Value: "C:/FILL/OUT/THIS/PATH" , Type: [initial] "Object"  [final] "FilePath"
constructJsonTreeModel:  Key: "experimentName" , Value: "Experiment0" , Type: "String"
constructJsonTreeModel:  Key: "recordLengthinSeconds" , Value: "600" , Type: "Integer"
constructJsonTreeModel:  Key: "researcherName" , Value: "Dr_Miniscope" , Type: "String"
handleJsonObject:  Key: "enabled" , Value: "true" , Type: "Bool"
handleJsonObject:  Key: "type" , Value: "scrolling" , Type: "String"
handleJsonObject:  Key: "windowHeight" , Value: "800" , Type: "Integer"
handleJsonObject:  Key: "windowWidth" , Value: "600" , Type: "Integer"
handleJsonObject:  Key: "windowX" , Value: "100" , Type: "Integer"
handleJsonObject:  Key: "windowY" , Value: "100" , Type: "Integer"
constructJsonTreeModel:  Key: "traceDisplay" , Value: "100" , Type: [initial] "Object"  [final] "Integer"

print m_userConfig:
 QJsonObject({"COMMENT":"This JSON file can be used as a template to build your own user config file for the Miniscope Software.","COMMENT2":"Keys with 'COMMENT' in their name are ignored by the software and are here to guide you through making a user config file.","COMMENT3":"Once you select or drag&drop a user configuration file into the main window of the software, you will also be able to edit it and see tips.","COMMENT_behaviorTracker":"The behavior tracker is currently in beta testing. It requires you to have a functional Python environment with DeepLabCut-Live setup.","COMMENT_behaviorTracker2":"For info on setting up DLC-Live go here, https://github.com/DeepLabCut/DeepLabCut-live","COMMENT_behaviorTracker3":"Currently only the type of 'DeepLabCut-Live' is supported. You need to provide an absolute path to your Pythong environment and DLC model.","COMMENT_behaviorTracker4":"If you don't to use the behaviorTracker either remove this section or set 'enabled' to false.","COMMENT_dataDirectory":"This will be the base folder for your Miniscope recordings. It should be an absolute path using forward slashes /","COMMENT_devices":"'devices' defines all input and output devices to the software.","COMMENT_devices2":"The currently supported 'deviceType' can be found in the deviceConfigs/videoDevices.json file and also are displayed in the main window of the software when first loaded.","COMMENT_directoryStructure":"When you start a recording the software will construct a folder structure for your experiment. This will be built in the dataDirectory location using the list of keys in directoryStructure.","COMMENT_directoryStructure2":"Each key listed in directoryStructure should be defined as well with its corresponding value. You can add your own keys as well.","COMMENT_directoryStructure3":"The data and time keys should not have values assigned to them as they will be populated with the recording data and time when you hit record in the software.","COMMENT_executables":"The 2 sections below allow you to execute an external .exe file on recording start and stop. The 'filePath' is the absolute path to the .exe file. ","COMMENT_recordLengthinSeconds":"Set this to 0 if you want to manually stop recordings. Any positive number will automatically stop recording at that number of seconds.","COMMENT_traceDisplay":"traceDisplay defines the parameters for the real-time time trace display. Delete this section or set enabled to false to turn off trace plotting.","COMMENT_traceDisplay2":"Currently only the type of 'scrolling' is implemented. The 'window' parameters set up the size and location of the trace display.","animalName":"Fully Ball","behaviorTracker":{"COMMENT_occupancyPlot":"If you want an inset showing animal coverage across the environment set enabled to true.","COMMENT_occupancyPlot2":"This will plot the log of a 2D occupancy histogram in the upper right corner of the behavior tracker window.","COMMENT_pCutoffDisplay":"All DLC pose data will be recording but this pCufOff will set the minimum p value for data to be plotted.","COMMENT_poseIdxForTraceDisplay":"This array will setup time trace plotting for specific pose indices. You must give it a the index number along with 'w', 'h', or 'wh'.","COMMENT_poseIdxForTraceDisplay2":"'w' means it will plot the width or x position. 'h' means it will plot the height or y position.","COMMENT_poseOverlay":"This section enables and sets up the overlaying of pose data on top of the behavior tracker window.","COMMENT_pyEnvPath":"This should be the absolute path to the base folder of your Pythong environment that can successfully run DLC-Live.","COMMENT_pyEnvPath2":"The Miniscope Software initially checks this folder to make sure it contains this exact subfolder, '/Lib/site-packages/dlclive'","COMMENT_resize":"resize will scale the behavior video for DLC-Live. This should be 1 or less. If DLC is running slow you should consider using a smaller resize value.","COMMENT_window":"These 'window' keys affect just the display of the behavior tracker. Set these to fit well 
within the rest of the GUI.","enabled":false,"modelPath":"ABSOLUTE/PATH/TO/DLC/MODEL","occupancyPlot":{"COMMENT_numBins":"numBins X and Y are the number of spatial bins the behavior camera will be divided into for the occupancy plot.","COMMENT_poseIdxToUse":"The occupancy plotter will take the mean position of the DLC pose indices listed here. It also requires the p value of these to be above the cutoff above to be used in the mean for each frame.","enabled":true,"numBinsX":100,"numBinsY":100,"poseIdxToUse":[0,1,2,3,4]},"pCutoffDisplay":0.3,"poseIdxForTraceDisplay":["0wh","1w","2w"],"poseOverlay":{"COMMENT_markerSize":"The markerSize sets how large the points, lines, or ribbons in the overlay will be. Reasonable values are between 3 and 20.","COMMENT_numOfPastPoses":"The overlay can display recent past positions of joints and fade them out as time goes one. This value sets how many past poses to display in the overlay.","COMMENT_skeleton":"You can enable the below 'skekelton' section if you want to also overlay a skeleton that connects certain pose indices or joints.","COMMENT_type":"type defines how the pose data will be shown. The allowable vales are 'point', 'line', 'ribbon","enabled":true,"markerSize":20,"numOfPastPoses":6,"skeleton":{"COMMENT_connectedIndices":"This is an array of arrays. Each internal array defines the set of connected pose indices or joints to be displayed.","connectedIndices":[[0,1,2,3,4,5],[6,7,8,9,10,11],[12,13]],"enabled":true},"type":"point"},"pyEnvPath":"ABSOLUTE/PATH/TO/PYTHON/ENVIRONMENT","resize":1,"type":"DeepLabCut-Live","windowScale":0.75,"windowX":200,"windowY":100},"customEntry0":"customEntValHere","dataDirectory":"C:/FILL/OUT/THIS/PATH","devices":{"COMMENT_cameras":"This is an array of the behavioral cameras along with their parameters. Look at the comments above for Miniscope as these are the same for cameras.","COMMENT_miniscopes":"This is a JSON object of miniscopes along with their parameters. Generally you will only have 1 entry here.","cameras":{"cameraDeviceName":{"COMMENT_compression":"A Lossly compression CODEC is generally fine for behavior video data. We like to use MJPG or XVID. When you start the software it will tell you all supported CODECs on your computer.","COMMENT_deviceType":"Supported types include 'WebCam', 'WebCam-320x240','WebCam-640x480','WebCam-1280x720'.","COMMENT_deviceType2":"If your behavior camera supports other resolutions you want to use you can add a new entry for it in deviceConfigs/videoDevices.json","ROI":{"height":480,"leftEdge":0,"note3":"Edge values are zero indexed","notes":"This defines the bounding box of the portion of the video that is saved to disk","topEdge":0,"width":640},"cameraCalibrationFileLocation":"","compression":"MJPG","deviceID":0,"deviceType":"WebCam-640x480","framesPerFile":1000,"showSaturation":true,"windowScale":0.5,"windowX":800,"windowY":600}},"miniscopes":{"miniscopeDeviceName":{"COMMENT":"gain, ewl, led0, frameRate allow you to design the initial values the Miniscope boots up with. These can be later adjusted in the GUI.","COMMENT_ROI":"You can define an ROI here or select one in the GUI. You can also completely remove this section if you don't want to trim the FOV at all.","COMMENT_compression":"Imaging data is save in .avi file format. You can choose what type of video compression to apply when saving data.","COMMENT_compression2":"We suggest using a lossless compression CODEC for Miniscope data. This would be either GREY or FFV1. GREY does no compression. FFV1 losslessly compresses the data but can be CPU intensive.","COMMENT_compression3":"We generally use FFV1 is our computer can keep up with it. If you notice the frame buffer filling up completely while recording you should switch to GREY.","COMMENT_deviceID":"All UVC camera devices on your computer have a unique deviceID starting with '0'. Try numbers until you find the one that connects to the correct Miniscope.","COMMENT_deviceID2":"This number will never be more than one minus the number of cameras devices (including Miniscopes) connected to your compute
r.","COMMENT_deviceName":"This can be whatever you want. It should be unique for each device though.","COMMENT_deviceType":"This should be a supported deviceType listed in the videoDevice.json file.","COMMENT_deviceType2":"Supported types include 'Miniscope_V4_BNO' and 'Miniscope_V3'","COMMENT_gain":"Low, Medium, High are 1x, 2x, and 3.5x","COMMENT_headOrientation":"If using a V4 Miniscope you should set enabled to true so stream and record head orientation data from the onboard IMU.","COMMENT_window":"The window keys define how the GUI for this device will be setup. They don't affect the actual recorded data.","ROI":{"height":600,"leftEdge":0,"note3":"Edge values are zero indexed","notes":"This defines the bounding box of the portion of the video that is saved to disk","topEdge":0,"width":600},"compression":"FFV1","deviceID":1,"deviceType":"Miniscope_V4_BNO","ewl":50,"frameRate":"20FPS","framesPerFile":1000,"gain":"Low","headOrientation":{"COMMENT_plotTrace":"Add or remove 'roll' 'pitch' and/or 'yaw' to define which get plotted in the time trace display.","enabled":true,"filterBadData":true,"plotTrace":["roll","pitch","yaw"]},"led0":10,"showSaturation":true,"windowScale":0.75,"windowX":800,"windowY":100}}},"directoryStructure":["researcherName","experimentName","animalName","customEntry0","date","time"],"executableOnStartRecording":{"arguments":["arg1","arg2"],"enabled":true,"filePath":"C:/FILL/OUT/THIS/PATH"},"executableOnStopRecording":{"arguments":["arg1","arg2","arg3"],"enabled":true,"filePath":"C:/FILL/OUT/THIS/PATH"},"experimentName":"Experiment0","recordLengthinSeconds":600,"researcherName":"Dr_Miniscope","traceDisplay":{"enabled":true,"type":"scrolling","windowHeight":800,"windowWidth":600,"windowX":100,"windowY":100}})

print m_standardItem:
Key: "COMMENT" , Value: "100" , Type: "Integer" , Tips: "These 'window' key: value pairs define the location and size of the trace display window."
Key: "COMMENT2" , Value: "100" , Type: "Integer" , Tips: "These 'window' key: value pairs define the location and size of the trace display window."
Key: "COMMENT3" , Value: "100" , Type: "Integer" , Tips: "These 'window' key: value pairs define the location and size of the trace display window."
Key: "COMMENT_behaviorTracker" , Value: "100" , Type: "Integer" , Tips: "These 'window' key: value pairs define the location and size of the trace display window."
Key: "COMMENT_behaviorTracker2" , Value: "100" , Type: "Integer" , Tips: "These 'window' key: value pairs define the location and size of the trace display window."
Key: "COMMENT_behaviorTracker3" , Value: "100" , Type: "Integer" , Tips: "These 'window' key: value pairs define the location and size of the trace display window."
Key: "COMMENT_behaviorTracker4" , Value: "100" , Type: "Integer" , Tips: "These 'window' key: value pairs define the location and size of the trace display window."
Key: "COMMENT_dataDirectory" , Value: "100" , Type: "Integer" , Tips: "These 'window' key: value pairs define the location and size of the trace display window."
Key: "COMMENT_devices" , Value: "100" , Type: "Integer" , Tips: "These 'window' key: value pairs define the location and size of the trace display window."
Key: "COMMENT_devices2" , Value: "100" , Type: "Integer" , Tips: "These 'window' key: value pairs define the location and size of the trace display window."
Key: "COMMENT_directoryStructure" , Value: "100" , Type: "Integer" , Tips: "These 'window' key: value pairs define the location and size of the trace display window."
Key: "COMMENT_directoryStructure2" , Value: "100" , Type: "Integer" , Tips: "These 'window' key: value pairs define the location and size of the trace display window."
Key: "COMMENT_directoryStructure3" , Value: "100" , Type: "Integer" , Tips: "These 'window' key: value pairs define the location and size of the trace display window."
Key: "COMMENT_executables" , Value: "100" , Type: "Integer" , Tips: "These 'window' key: value pairs define the location and size of the trace display window."
Key: "COMMENT_recordLengthinSeconds" , Value: "100" , Type: "Integer" , Tips: "These 'window' key: value pairs define the location and size of the trace display window."
Key: "COMMENT_traceDisplay" , Value: "100" , Type: "Integer" , Tips: "These 'window' key: value pairs define the location and size of the trace display window."
Key: "COMMENT_traceDisplay2" , Value: "100" , Type: "Integer" , Tips: "These 'window' key: value pairs define the location and size of the trace display window."
Key: "animalName" , Value: "100" , Type: "Integer" , Tips: "These 'window' key: value pairs define the location and size of the trace display window."
Key: "behaviorTracker" , Value: "100" , Type: "Integer" , Tips: "These 'window' key: value pairs define the location and size of the trace display window."
Key: "customEntry0" , Value: "100" , Type: "Integer" , Tips: "These 'window' key: value pairs define the location and size of the trace display window."
Key: "dataDirectory" , Value: "100" , Type: "Integer" , Tips: "These 'window' key: value pairs define the location and size of the trace display window."
Key: "devices" , Value: "100" , Type: "Integer" , Tips: "These 'window' key: value pairs define the location and size of the trace display window."
Key: "directoryStructure" , Value: "100" , Type: "Integer" , Tips: "These 'window' key: value pairs define the location and size of the trace display window."
Key: "executableOnStartRecording" , Value: "100" , Type: "Integer" , Tips: "These 'window' key: value pairs define the location and size of the trace display window."
Key: "executableOnStopRecording" , Value: "100" , Type: "Integer" , Tips: "These 'window' key: value pairs define the location and size of the trace display window."
Key: "experimentName" , Value: "100" , Type: "Integer" , Tips: "These 'window' key: value pairs define the location and size of the trace display window."
Key: "recordLengthinSeconds" , Value: "100" , Type: "Integer" , Tips: "These 'window' key: value pairs define the location and size of the trace display window."
Key: "researcherName" , Value: "100" , Type: "Integer" , Tips: "These 'window' key: value pairs define the location and size of the trace display window."
Key: "traceDisplay" , Value: "100" , Type: "Integer" , Tips: "These 'window' key: value pairs define the location and size of the trace display window."

print m_jsonTreeModel:
QStandardItemModel(0x2092dc42560)
Key: animalName , Value: Fully Ball , Type: String , Tips: This will be saved in the recording's meta data file as well as can be used as an entry into the 'directoryStructure' array.
Key: behaviorTracker , Value:  , Type: Object , Tips: 
    Key: enabled , Value: false , Type: Bool , Tips: This enables or disabled the entire behavior tracker module within the software. Enable this for the behavior tracker to run and generate a GUI.
    Key: modelPath , Value: ABSOLUTE/PATH/TO/DLC/MODEL , Type: FilePath , Tips: This is the absolute path to the DLC model you want to use.
    Key: occupancyPlot , Value:  , Type: Object , Tips: No tips available
        Key: enabled , Value: true , Type: Bool , Tips: The behavior tracker is capable of generating a 2D occupancy plot based on DLC pose data and overlaying it within the behavior tracker GUI. This enables that option.
        Key: numBinsX , Value: 100 , Type: Integer , Tips: This is the number of horizontal spatial bins used in the 2D occupancy calculation. Usually somewhere between 20 and 100 works well.
        Key: numBinsY , Value: 100 , Type: Integer , Tips: This is the number of vertical spatial bins used in the 2D occupancy calculation. Usually somewhere between 20 and 100 works well.
        Key: poseIdxToUse , Value:  , Type: Array(Integer) , Tips: The 2D occupancy plotter will use the mean of the DLC pose/joint indices listed in this array to fill the 2D occupancy bins. You need to list at least 1 indice for the plotter to work.
            Key:  , Value: 0 , Type: Integer , Tips: 
            Key:  , Value: 1 , Type: Integer , Tips: 
            Key:  , Value: 2 , Type: Integer , Tips: 
            Key:  , Value: 3 , Type: Integer , Tips: 
            Key:  , Value: 4 , Type: Integer , Tips: 
            [poseIdxToUse] end of children
        [occupancyPlot] end of children
    Key: pCutoffDisplay , Value: 0.3 , Type: Double , Tips: All DLC pose data will be recording but this pCufOff will set the minimum p value for data to be plotted within the GUI.
    Key: poseIdxForTraceDisplay , Value:  , Type: Array(String) , Tips: The behavior tracker can also plot the positional time trace of any of the DLC pose/joints within the trace display. This array will setup time trace plotting for specific pose indices. You must give it a the index number along with 'w', 'h', or 'wh'. 'w' means it will plot the width or x position. 'h' means it will plot the height or y position.
        Key:  , Value: 0wh , Type: String , Tips: 
        Key:  , Value: 1w , Type: String , Tips: 
        Key:  , Value: 2w , Type: String , Tips: 
        [poseIdxForTraceDisplay] end of children
    Key: poseOverlay , Value:  , Type: Object , Tips: No tips available
        Key: enabled , Value: true , Type: Bool , Tips: This section enables and sets up the overlaying of DLC pose/joint/skeleton data on top of the behavior tracker window.
        Key: markerSize , Value: 20 , Type: Integer , Tips: The markerSize sets how large the points, lines, or ribbons in the overlay will be. Reasonable values are between 3 and 20.
        Key: numOfPastPoses , Value: 6 , Type: Integer , Tips: The overlay can display recent past positions of joints and fade them out as time goes one. This value sets how many past poses to display in the overlay. Setting this to 0 will only show the most recent DLC pose data. A valuse of 0 to 20 is resonable here.
        Key: skeleton , Value:  , Type: Object , Tips: No tips available
            Key: connectedIndices , Value:  , Type: Array(Array(Integer)) , Tips: This is an array of arrays. Each internal array defines the set of connected pose/joint indices to be connected and displayed.
                Key: Array , Value:  , Type: Array(Integer) , Tips: 
                    Key:  , Value: 0 , Type: Integer , Tips: 
                    Key:  , Value: 1 , Type: Integer , Tips: 
                    Key:  , Value: 2 , Type: Integer , Tips: 
                    Key:  , Value: 3 , Type: Integer , Tips: 
                    Key:  , Value: 4 , Type: Integer , Tips: 
                    Key:  , Value: 5 , Type: Integer , Tips: 
                    [Array] end of children
                Key: Array , Value:  , Type: Array(Integer) , Tips: 
                    Key:  , Value: 6 , Type: Integer , Tips: 
                    Key:  , Value: 7 , Type: Integer , Tips: 
                    Key:  , Value: 8 , Type: Integer , Tips: 
                    Key:  , Value: 9 , Type: Integer , Tips: 
                    Key:  , Value: 10 , Type: Integer , Tips: 
                    Key:  , Value: 11 , Type: Integer , Tips: 
                    [Array] end of children
                Key: Array , Value:  , Type: Array(Integer) , Tips: 
                    Key:  , Value: 12 , Type: Integer , Tips: 
                    Key:  , Value: 13 , Type: Integer , Tips: 
                    [Array] end of children
                [connectedIndices] end of children
            Key: enabled , Value: true , Type: Bool , Tips: You can enable the below 'skekelton' section if you want to also overlay a skeleton that connects certain pose indices or joints.
            [skeleton] end of children
        Key: type , Value: point , Type: String , Tips: You can select between displaying data as "point", "line", or "ribbon". Try them all to see what you like the most.
        [poseOverlay] end of children
    Key: pyEnvPath , Value: ABSOLUTE/PATH/TO/PYTHON/ENVIRONMENT , Type: FilePath , Tips: The behavior tracker needs the absolute path to a functional Python virtual environment which can successfully run DeepLabCut-Live. The Miniscope Software initially checks this folder to make sure it contains this exact subfolder, '/Lib/site-packages/dlclive'
    Key: resize , Value: 1 , Type: Double , Tips: This number will resize the behavior camera image to lower resolution if your CPU/GPU is having a hard time keeping up with the video stream. This number shouldn't ever be set above 1.
    Key: type , Value: DeepLabCut-Live , Type: String , Tips: Right now the behavior tracker only supports "DeepLabCut-Live" as type. For info on setting up DLC-Live go here, https://github.com/DeepLabCut/DeepLabCut-live
    Key: windowScale , Value: 0.75 , Type: Double , Tips: These 'window' keys: value pairs affect just the display of the behavior tracker. Set these to fit well within the rest of your GUI. This sets the scale of the window relative to the size of the actual video data it is processing. A value of 1 is a good place to start.
    Key: windowX , Value: 200 , Type: Integer , Tips: These 'window' keys: value pairs affect just the display of the behavior tracker. Set these to fit well within the rest of your GUI. This is the top left location of the GUI window.
    Key: windowY , Value: 100 , Type: Integer , Tips: These 'window' keys: value pairs affect just the display of the behavior tracker. Set these to fit well within the rest of your GUI. This is the top left location of the GUI window.
    [behaviorTracker] end of children
Key: customEntry0 , Value: customEntValHere , Type: String , Tips: 
Key: dataDirectory , Value: C:/FILL/OUT/THIS/PATH , Type: DirPath , Tips: This is an absolute path to the base directory you want to save all data to. It should use '/' and not '\'.
Key: devices , Value:  , Type: Object , Tips: 
    Key: cameras , Value:  , Type: Object , Tips: No tips available
        Key: cameraDeviceName , Value:  , Type: Object , Tips: No tips available
            Key: ROI , Value:  , Type: Object , Tips: No tips available
                Key: height , Value: 480 , Type: Integer , Tips: You can define an ROI here or select one in the GUI. You can also completely remove this section if you don't want to trim the FOV at all. These values define the bounding box in pixels of the ROI.
                Key: leftEdge , Value: 0 , Type: Integer , Tips: You can define an ROI here or select one in the GUI. You can also completely remove this section if you don't want to trim the FOV at all. These values define the bounding box in pixels of the ROI.
                Key: note3 , Value: Edge values are zero indexed , Type: Unknown , Tips: 
                Key: notes , Value: This defines the bounding box of the portion of the video that is saved to disk , Type: Unknown , Tips: 
                Key: topEdge , Value: 0 , Type: Integer , Tips: You can define an ROI here or select one in the GUI. You can also completely remove this section if you don't want to trim the FOV at all. These values define the bounding box in pixels of the ROI.
                Key: width , Value: 640 , Type: Integer , Tips: You can define an ROI here or select one in the GUI. You can also completely remove this section if you don't want to trim the FOV at all. These values define the bounding box in pixels of the ROI.
                [ROI] end of children
            Key: cameraCalibrationFileLocation , Value: N/A , Type: Unknown , Tips: 
            Key: compression , Value: MJPG , Type: String , Tips: Imaging data is save in .avi file format. You can choose what type of video compression to apply when saving data. A Lossly compression CODEC is generally fine for behavior video data. We like to use MJPG or XVID. When you start the software it will tell you all supported CODECs on your computer.
            Key: deviceID , Value: 0 , Type: Integer , Tips: All UVC camera devices on your computer have a unique deviceID starting with '0'. Try numbers until you find the one that connects to the correct Miniscope. This number will never be more than one minus the number of cameras devices (including Miniscopes) connected to your computer.
            Key: deviceType , Value: WebCam-640x480 , Type: CameraDeviceType , Tips: This should be a supported deviceType listed in the deviceconfig/videoDevice.json file.
            Key: framesPerFile , Value: 1000 , Type: Integer , Tips: We generally set this to 1000. It defines how large each .avi file will be in your recording.
            Key: showSaturation , Value: true , Type: Bool , Tips: If set to true, the video stream window will show red pixels for any fully saturated pixels. This can also be turned on and off within the video display window.
            Key: windowScale , Value: 0.5 , Type: Double , Tips: The window keys define how the GUI for this device will be setup. They don't affect the actual recorded data.
            Key: windowX , Value: 800 , Type: Integer , Tips: The window keys define how the GUI for this device will be setup. They don't affect the actual recorded data.
            Key: windowY , Value: 600 , Type: Integer , Tips: The window keys define how the GUI for this device will be setup. They don't affect the actual recorded data.
            [cameraDeviceName] end of children
        [cameras] end of children
    Key: miniscopes , Value:  , Type: Object , Tips: No tips available
        Key: miniscopeDeviceName , Value:  , Type: Object , Tips: No tips available
            Key: ROI , Value:  , Type: Object , Tips: No tips available
                Key: height , Value: 600 , Type: Integer , Tips: You can define an ROI here or select one in the GUI. You can also completely remove this section if you don't want to trim the FOV at all. These values define the bounding box in pixels of the ROI.
                Key: leftEdge , Value: 0 , Type: Integer , Tips: You can define an ROI here or select one in the GUI. You can also completely remove this section if you don't want to trim the FOV at all. These values define the bounding box in pixels of the ROI.
                Key: note3 , Value: Edge values are zero indexed , Type: Unknown , Tips: 
                Key: notes , Value: This defines the bounding box of the portion of the video that is saved to disk , Type: Unknown , Tips: 
                Key: topEdge , Value: 0 , Type: Integer , Tips: You can define an ROI here or select one in the GUI. You can also completely remove this section if you don't want to trim the FOV at all. These values define the bounding box in pixels of the ROI.
                Key: width , Value: 600 , Type: Integer , Tips: You can define an ROI here or select one in the GUI. You can also completely remove this section if you don't want to trim the FOV at all. These values define the bounding box in pixels of the ROI.
                [ROI] end of children
            Key: compression , Value: FFV1 , Type: String , Tips: Imaging data is save in .avi file format. You can choose what type of video compression to apply when saving data. We suggest using a lossless compression CODEC for Miniscope data. This would be either GREY or FFV1. GREY does no compression. FFV1 losslessly compresses the data but can be CPU intensive. We generally use FFV1 is our computer can keep up with it. If you notice the frame buffer filling up completely while recording you should switch to GREY.
            Key: deviceID , Value: 1 , Type: Integer , Tips: All UVC camera devices on your computer have a unique deviceID starting with '0'. Try numbers until you find the one that connects to the correct Miniscope. This number will never be more than one minus the number of cameras devices (including Miniscopes) connected to your computer.
            Key: deviceType , Value: Miniscope_V4_BNO , Type: MiniscopeDeviceType , Tips: This should be a supported deviceType listed in the deviceconfig/videoDevice.json file. Supported types include "Miniscope_V4_BNO" and "Miniscope_V3".
            Key: ewl , Value: 50 , Type: Integer , Tips: This sets the initial position of the electro-tunable lens focal plane.
            Key: frameRate , Value: 20FPS , Type: String , Tips: This sets the initial FPS of the video device. Acceptable values usually go in increments of 5 between 10 and 30 and have the form of: "20FPS" for example.
            Key: framesPerFile , Value: 1000 , Type: Integer , Tips: We generally set this to 1000. It defines how large each .avi file will be in your recording.
            Key: gain , Value: Low , Type: String , Tips: Acceptable values are "Low", "Medium", "High". For the V4 Miniscope these correspond to 1x, 2x, and 3.5x respectively.
            Key: headOrientation , Value:  , Type: Object , Tips: No tips available
                Key: enabled , Value: true , Type: Bool , Tips: Set this to true if you have a V4 or newer Miniscope. It will acquire and display head-orinetation data from the on-board BNO sensor.
                Key: filterBadData , Value: true , Type: Bool , Tips: Generally this should be set to true for V4 Miniscopes with full version numbers under v4.34. If you see a lot of noise in your displayed head-orientation data then you can set this to true.
                Key: plotTrace , Value:  , Type: Array(String) , Tips: Add or remove 'roll' 'pitch' and/or 'yaw' to define which dimensions get plotted in the time trace display.
                    Key:  , Value: roll , Type: String , Tips: 
                    Key:  , Value: pitch , Type: String , Tips: 
                    Key:  , Value: yaw , Type: String , Tips: 
                    [plotTrace] end of children
                [headOrientation] end of children
            Key: led0 , Value: 10 , Type: Integer , Tips: This sets the initial excitation LED intensity. Values can be from 0 to 100 but many Miniscope configurations have trouble with values over 70 or 80 due to current limits through certain coax cable lengths.
            Key: showSaturation , Value: true , Type: Bool , Tips: If set to true, the video stream window will show red pixels for any fully saturated pixels. This can also be turned on and off within the video display window.
            Key: windowScale , Value: 0.75 , Type: Double , Tips: The window keys define how the GUI for this device will be setup. They don't affect the actual recorded data.
            Key: windowX , Value: 800 , Type: Integer , Tips: The window keys define how the GUI for this device will be setup. They don't affect the actual recorded data.
            Key: windowY , Value: 100 , Type: Integer , Tips: The window keys define how the GUI for this device will be setup. They don't affect the actual recorded data.
            [miniscopeDeviceName] end of children
        [miniscopes] end of children
    [devices] end of children
Key: directoryStructure , Value:  , Type: Array(String) , Tips: This is an array of strings which defines the structure of the save directory. 'Time' and 'Date' will generate the exact time and data when recording starts. All other entries can be whatever you want but they also need to have their own "key": "value" pair defined within this file.
    Key:  , Value: researcherName , Type: String , Tips: 
    Key:  , Value: experimentName , Type: String , Tips: 
    Key:  , Value: animalName , Type: String , Tips: 
    Key:  , Value: customEntry0 , Type: String , Tips: 
    Key:  , Value: date , Type: String , Tips: 
    Key:  , Value: time , Type: String , Tips: 
    [directoryStructure] end of children
Key: executableOnStartRecording , Value:  , Type: Object , Tips: 
    Key: arguments , Value:  , Type: Array(String) , Tips: This is an array of strings that will be sent as arguments to the .exe listed in 'filePath'.
        Key:  , Value: arg1 , Type: String , Tips: 
        Key:  , Value: arg2 , Type: String , Tips: 
        [arguments] end of children
    Key: enabled , Value: true , Type: Bool , Tips: This enables or disabled the .exe file from being called.
    Key: filePath , Value: C:/FILL/OUT/THIS/PATH , Type: FilePath , Tips: This is an absolute path to a .exe file you want to have executed at the start of recording. This is usually used to syncronize some third party hardware.
    [executableOnStartRecording] end of children
Key: executableOnStopRecording , Value:  , Type: Object , Tips: 
    Key: arguments , Value:  , Type: Array(String) , Tips: This is an array of strings that will be sent as arguments to the .exe listed in 'filePath'.
        Key:  , Value: arg1 , Type: String , Tips: 
        Key:  , Value: arg2 , Type: String , Tips: 
        Key:  , Value: arg3 , Type: String , Tips: 
        [arguments] end of children
    Key: enabled , Value: true , Type: Bool , Tips: This enables or disabled the .exe file from being called.
    Key: filePath , Value: C:/FILL/OUT/THIS/PATH , Type: FilePath , Tips: This is an absolute path to a .exe file you want to have executed at the start of recording. This is usually used to syncronize some third party hardware.
    [executableOnStopRecording] end of children
Key: experimentName , Value: Experiment0 , Type: String , Tips: This will be saved in the recording's meta data file as well as can be used as an entry into the 'directoryStructure' array.
Key: recordLengthinSeconds , Value: 600 , Type: Integer , Tips: This is an integer value. A value of '0' does not limit recording length. An integer value above 0 will stop the recording at that amount of seconds.
Key: researcherName , Value: Dr_Miniscope , Type: String , Tips: This will be saved in the recording's meta data file as well as can be used as an entry into the 'directoryStructure' array.
Key: traceDisplay , Value:  , Type: Object , Tips: 
    Key: enabled , Value: true , Type: Bool , Tips: Trace Display is a separate GUI window which can display all types of time trace data. It can be used to display head-orientation data from the V4 Miniscope, Neuron ROI fluorescence, DLC pose positions, and so on. Enable this to generate the trace display window.
    Key: type , Value: scrolling , Type: String , Tips: Only supports "scrolling" right now.
    Key: windowHeight , Value: 800 , Type: Integer , Tips: These 'window' key: value pairs define the location and size of the trace display window.
    Key: windowWidth , Value: 600 , Type: Integer , Tips: These 'window' key: value pairs define the location and size of the trace display window.
    Key: windowX , Value: 100 , Type: Integer , Tips: These 'window' key: value pairs define the location and size of the trace display window.
    Key: windowY , Value: 100 , Type: Integer , Tips: These 'window' key: value pairs define the location and size of the trace display window.
    [traceDisplay] end of children
[] end of children
qrc:/main.qml:46: ReferenceError: view is not defined
qml: repeateed: 12
qml: repeateed: 13
qml: repeateed: 14
qml: repeateed: 15
qml: repeateed: 16
qml: repeateed: 17
qml: repeateed: 18
qml: repeateed: 19
qml: repeateed: 20
qml: repeateed: 21
qml: repeateed: 22
qml: repeateed: 23